# Generated by Selenium IDE
import pytest
import time
import json
import smtplib
import random
import datetime
import sys
import socket
import email.message

from string import Template
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium import webdriver

#trainLine with available trains:
trainLineAvailableURL = 'https://www.thetrainline.com/book/results?origin=a0893c38dcb9222abe36edec6a51a1ac&destination=4e139b1c9606fb723c6c91f5ab282209&outwardDate=2019-12-04T01%3A00%3A00&outwardDateType=departAfter&journeySearchType=single&passengers%5B%5D=1993-09-11%7C2fcaf264-e164-4475-a700-14125cc95137&lang=es&selectedOutward=Iqx1tvxG54s%3D%3Aq3TP9vc0GnA%3D%3AStandard'
#trainLine to check available trains:
trainLineCheckAvailableURL = 'https://www.thetrainline.com/book/results?origin=a0893c38dcb9222abe36edec6a51a1ac&destination=4e139b1c9606fb723c6c91f5ab282209&outwardDate=2020-01-15T01%3A00%3A00&outwardDateType=departAfter&journeySearchType=single&passengers%5B%5D=1993-09-11%7C2fcaf264-e164-4475-a700-14125cc95137&lang=es'
#logicTravel with available trains:
logicTravelAvailableURL = 'https://www.logitravel.com/transportstransactional/AvailabilityMaterial?ProductType=Train&hashRooms=30A0D&LineOfBusiness=Trains&DestinationType=EST&OriginAirportCode=0YH&DestinationCode=1GO&DepartureDateStr=04/12/2019&DepartureHourStr=06:00'
#logicTravel to check available trains:
logicTravelCheckAvailableURL = 'https://www.logitravel.com/transportstransactional/AvailabilityMaterial?ProductType=Train&hashRooms=30A0D&LineOfBusiness=Trains&DestinationType=EST&OriginAirportCode=0YH&DestinationCode=1GO&DepartureDateStr=04/01/2020&DepartureHourStr=06:00'

MY_ADDRESS = 'renfeticketsavailable@gmail.com'
PASSWORD = '*CRS*lunes17'

REQUESTDELAY = 0
REQUESTDELAYMIN = 3 #in mins 
REQUESTDELAYMAX = 7 #in mins 
PRIORITYDELAY = 20 #in mins
driver = 0

previousFailNotified = 0

def get_contacts(filename):
    """
    Return two lists names, emails containing names and email addresses
    read from a file specified by filename.
    """
    
    names = []
    emails = []
    with open(filename, mode='r', encoding='utf-8') as contacts_file:
        for a_contact in contacts_file:
            if ((len(a_contact.split())-1) > 0):
                names.append(a_contact.split()[0])
                emails.append(a_contact.split()[len(a_contact.split())-1])
    return names, emails

def read_template(filename):
    """
    Returns a Template object comprising the contents of the 
    file specified by filename.
    """
    
    with open(filename, 'r', encoding='utf-8') as template_file:
        template_file_content = template_file.read()
    return Template(template_file_content)

def sendEmails(emailList, emailSubject, messageToSend):
    names, emails = get_contacts(emailList) # read contacts
    message_template = read_template(messageToSend)

    # set up the SMTP server
    s = smtplib.SMTP('smtp.gmail.com' , 587)
    s.starttls()
    s.login(MY_ADDRESS, PASSWORD)

    # For each contact, send the email:
    for name, emailTo in zip(names, emails):
        now = datetime.datetime.now()
        date = str(now.strftime("%d-%m-%Y" + " a las " "%H:%M:%S"))
        email_content = """
        <html>
         
        <head>
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
            
           <title>Tutsplus Email Newsletter</title>
           <style type="text/css">
            a {color: #d80a3e;}
          body, #header h1, #header h2, p {margin: 0; padding: 0;}
          #main {border: 1px solid #cfcece;}
          img {display: block;}
          #top-message p, #bottom p {color: #3f4042; font-size: 12px; font-family: Arial, Helvetica, sans-serif; }
          #header h1 {color: #ffffff !important; font-family: "Lucida Grande", sans-serif; font-size: 24px; margin-bottom: 0!important; padding-bottom: 0; }
          #header p {color: #ffffff !important; font-family: "Lucida Grande", "Lucida Sans", "Lucida Sans Unicode", sans-serif; font-size: 12px;  }
          h5 {margin: 0 0 0.8em 0;}
            h5 {font-size: 18px; color: #444444 !important; font-family: Arial, Helvetica, sans-serif; }
          p {font-size: 12px; color: #444444 !important; font-family: "Lucida Grande", "Lucida Sans", "Lucida Sans Unicode", sans-serif; line-height: 1.5;}
           </style>
        </head>
        <body>
        <table width="100%" cellpadding="0" cellspacing="0" bgcolor="e4e4e4"><tr><td>
        <table id="top-message" cellpadding="20" cellspacing="0" width="600" align="center">
            <tr>
              <td align="center">
                <p><a href="#">View in Browser</a></p>
              </td>
            </tr>
          </table>
         
                 
        <table id="main" width="600" align="center" cellpadding="0" cellspacing="15" bgcolor="ffffff">
            <tr>
              <td>
                <table id="header" cellpadding="10" cellspacing="0" align="center" bgcolor="8fb3e9">
                  <tr>
                    <td width="570" align="center"  bgcolor="#0257f5"><h1>Nuevos billetes Renfe MAD-PAM</h1></td>
                  </tr>
                  <tr>
                    <td width="570" align="right" bgcolor="#0257f5"><p>""" + date + """</p></td>
                  </tr>
                </table>
              </td>
            </tr>
         
            <tr>
              <td>
                <table id="content-3" cellpadding="0" cellspacing="0" align="center">
                  <tr>
                      <td width="250" valign="top" bgcolor="d0d0d0" style="padding:5px;">
                      <img src="http://www.renfe.com/imgHome/logo.png" width="250" height="150" />
                    </td>
                      <td width="15"></td>
                    <td width="250" valign="top" bgcolor="d0d0d0" style="padding:5px;">
                        <img src="https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQahirROW-4EAH1INR2LWowYzOx8GH2O8qxUoCI7cZMQ8A7KFuDew" width ="250" height="150" />
                    </td>
                  </tr>
                </table>
              </td>
            </tr>
            <tr>
              <td>
                <table id="content-4" cellpadding="0" cellspacing="0" align="center">
                  <tr>
                    <td width="250" valign="top">
                      <h5>Ya estan disponibles los billetes Pamplona Madrid</h5>
                      <p>La tarifa promo es la mas economica, con tan solo 17,85 euros por trayecto.</p>
                    </td>
                    <td width="15"></td>
                    <td width="250" valign="top">
                      <h5>Proyecto in3ator, dando una esperanza a los bebes prematuros en paises en desarrollo</h5>
                      <p>Conoce mas de este proyecto y como colaborar en in3ator.org</p>
                    </td>
                  </tr>
                </table>
              </td>
            </tr>
                   
        </body>
        </html>
         
         
        """         
        msg = email.message.Message()
        msg['Subject'] = emailSubject         
        msg['From'] = MY_ADDRESS
        msg['To'] = emailTo
        password = PASSWORD
        msg.add_header('Content-Type', 'text/html')
        msg.set_payload(email_content)
         
        s = smtplib.SMTP('smtp.gmail.com: 587')
        s.starttls()
         
        # Login Credentials for sending the mail
        s.login(msg['From'], password)
         
        s.sendmail(msg['From'], [msg['To']], msg.as_string())
        
    # Terminate the SMTP session and close the connection
    s.quit()

def checkRenfeTrains (date):
    if(internet_connection()):
        log("Checkeando billetes en Renfe...", 'beginLine')
        success = 0
        global driver
        driver = webdriver.Firefox()
    ##    driver.minimize_window()
        driver.get("http://www.renfe.com/")
        driver.find_element_by_id("IdOrigen").click()
        driver.find_element_by_id("IdOrigen").send_keys("mad")
        time.sleep(1)
        driver.find_element_by_id("IdOrigen").send_keys(Keys.ENTER)
        if(driver.page_source.find("Madrid")>0):
            log ("Renfe web working as expected", 'endLine')
        else:
            log ("Renfe web ISSUE", 'endLine')        
        driver.find_element_by_id("IdDestino").send_keys("pam")
        time.sleep(1)
        driver.find_element_by_id("IdDestino").send_keys(Keys.ENTER)
        driver.find_element_by_id("__fechaIdaVisual").click()
        driver.find_element_by_id('__fechaIdaVisual').clear()
        driver.find_element_by_id("__fechaIdaVisual").send_keys(date)
        driver.find_element_by_css_selector(".btn").click()
        if(driver.page_source.find("7.35") > 0 or driver.page_source.find("11.35") > 0 or driver.page_source.find("15.05") > 0):
            success = 1
        driver.close()
        driver.quit()
        return (success)
    
def checkDirectURLwebpage (url):
    log("Checkeando billetes en web con URL directa...", 'newLine')
    success = 0
    global driver
    driver = webdriver.Firefox()
##    driver.minimize_window()
    driver.get(url)
    time.sleep(5) #wait for the browser to load page
    if(driver.page_source.find("7:35") > 0 or driver.page_source.find("11:35") > 0):
        success = 1
    driver.close()
    driver.quit()
    return (success)

def checkTrains (result, checkMode):
    if(checkMode=='verify'):
        log("verifying script funcionality...", 'beginLine')
        if (result == 1):
            log("script working as expected", 'endLine')
        else:
            log("script FAIL", 'endLine')
            global previousFailNotified
            if (previousFailNotified == 0):
                previousFailNotified=1
                sendEmails('priorityContacts.txt',"Renfe: fail script",'scriptFail.txt')          
    elif (checkMode == 'check'):
        if (result) == 1:
            log("Nuevos billetes disponibles, mandando correos de notificacion...", 'newLine')
            sendEmails('priorityContacts.txt',"Renfe: nuevos billetes",'ticketsAvailable.txt')
            time.sleep(PRIORITYDELAY*60)
            sendEmails('othersContacts.txt',"Renfe: nuevos billetes",'ticketsAvailable.txt')
            time.sleep(PRIORITYDELAY*60)
            sendEmails('othersContacts.txt',"Renfe: nuevos billetes",'ticketsAvailable.txt')
            while True:
                input("SCRIPT FINISHED")
        else:
            REQUESTDELAY = random.randrange(REQUESTDELAYMIN, REQUESTDELAYMAX)
            log("No hay billetes disponibles, siguiente consulta dentro de ", 'beginLine')
            log(str(REQUESTDELAY), 'noNewLine')
            log(" minutos",'endLine')
            time.sleep(REQUESTDELAY * 60)

def log(logToSave, line):
    now = datetime.datetime.now()    
    file= open("RenfeScriptLog.txt","a")
    if(line == 'newLine' or line == 'beginLine'):
        file.write(now.strftime("%H:%M:%S:%Y-%m-%d"))
        file.write(":")
        print(now.strftime("%H:%M:%S:%Y-%m-%d"), end = '')
        print(":", end = '')
    file.write(logToSave)
    print(logToSave, end = '')
    if(line == 'newLine' or line == 'endLine'):
        file.write("\r\n")
        print("")
    file.close()
            
def internet_connection():
    try:
        log ("checking internet connection...", 'newLine')
        host = socket.gethostbyname("www.google.com")
        s = socket.create_connection((host, 80), 2)
        s.close()
        log ('Internet connection: ON', 'newLine')
        return True

    except Exception as e:
        log (str(e), 'newLine')
        log ('Internet connection: OFF', 'newLine')
    return True

def verifyingTest():
    #checkTrains (checkDirectURLwebpage(trainLineAvailableURL), 'verify')
    #checkTrains (checkDirectURLwebpage(logicTravelAvailableURL), 'verify')
    checkTrains (checkRenfeTrains("04/12/2019"), 'verify')


def main():
    while True:
        try:
            verifyingTest()
            count = 0
            while count < 50:
                checkTrains (checkRenfeTrains("15/01/2020"), 'check')
                #checkTrains (checkDirectURLwebpage(trainLineCheckAvailableURL), 'check')
                #checkTrains (checkDirectURLwebpage(logicTravelCheckAvailableURL), 'check')
                count += 1
        except Exception as e:
            log(str(e), 'newline')
            global driver
            driver.quit()
            if 'KeyboardInterrupt' in str(e):
                exit
            else:
                continue
        
if __name__ == '__main__':
    main()

    
  
